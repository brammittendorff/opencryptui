name: Build and Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  deployments: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up CMake
        if: matrix.os != 'windows-latest'
        uses: jwlawson/actions-setup-cmake@v2

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build git qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools libssl-dev libsodium-dev libargon2-dev

      - name: Install Homebrew (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" || { echo "Homebrew installation failed"; exit 1; }

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install qt@5 openssl libsodium argon2 ninja
          brew link --force qt@5

      - name: Set environment variables for macOS
        if: matrix.os == 'macos-latest'
        run: |
          echo "ARGON2_LIB_DIR=$(brew --prefix argon2)/lib" >> $GITHUB_ENV
          echo "ARGON2_INCLUDE_DIR=$(brew --prefix argon2)/include" >> $GITHUB_ENV
          echo "SODIUM_LIB_DIR=$(brew --prefix libsodium)/lib" >> $GITHUB_ENV
          echo "SODIUM_INCLUDE_DIR=$(brew --prefix libsodium)/include" >> $GITHUB_ENV
          echo "Qt5_DIR=$(brew --prefix qt@5)/lib/cmake/Qt5" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$(brew --prefix qt@5)" >> $GITHUB_ENV

      - name: Setup MSYS2 (Windows)
        if: matrix.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-openssl
            mingw-w64-x86_64-libsodium
            mingw-w64-x86_64-argon2
            mingw-w64-x86_64-qt5-base
            mingw-w64-x86_64-qt5-tools
            cmake
            gcc
            mingw-w64-x86_64-ntldd

      - name: Find Qt5 CMake directory
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          QT5_CONFIG=$(find /mingw64/ -name "Qt5Config.cmake" -o -name "qt5-config.cmake" | head -n 1)
          if [ -z "$QT5_CONFIG" ]; then
            echo "Qt5Config.cmake not found!"
            exit 1
          fi
          QT5_DIR=$(dirname ${QT5_CONFIG})
          echo "Qt5_DIR=${QT5_DIR}" >> $GITHUB_ENV
          echo "CMAKE_MODULE_PATH=${QT5_DIR}" >> $GITHUB_ENV

      - name: Build and set up dependencies (Windows)
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          echo "Setting up environment variables..."
          echo "OPENSSL_ROOT_DIR=/mingw64" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/mingw64/include" >> $GITHUB_ENV
          echo "OPENSSL_CRYPTO_LIBRARY=/mingw64/lib/libcrypto.a" >> $GITHUB_ENV
          echo "OPENSSL_SSL_LIBRARY=/mingw64/lib/libssl.a" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=/mingw64" >> $GITHUB_ENV
          echo "ARGON2_LIB_DIR=/mingw64/lib" >> $GITHUB_ENV
          echo "ARGON2_INCLUDE_DIR=/mingw64/include" >> $GITHUB_ENV
          echo "SODIUM_LIB_DIR=/mingw64/lib" >> $GITHUB_ENV
          echo "SODIUM_INCLUDE_DIR=/mingw64/include" >> $GITHUB_ENV
          echo "/mingw64/bin" >> $GITHUB_PATH

          echo "Verifying installations..."
          pacman -Q mingw-w64-x86_64-gcc mingw-w64-x86_64-cmake mingw-w64-x86_64-ninja mingw-w64-x86_64-openssl mingw-w64-x86_64-libsodium mingw-w64-x86_64-argon2 mingw-w64-x86_64-qt5-base mingw-w64-x86_64-qt5-tools

      - name: Debug environment variables
        run: |
          echo "ARGON2_LIB_DIR: ${{ env.ARGON2_LIB_DIR }}"
          echo "ARGON2_INCLUDE_DIR: ${{ env.ARGON2_INCLUDE_DIR }}"
          echo "SODIUM_LIB_DIR: ${{ env.SODIUM_LIB_DIR }}"
          echo "SODIUM_INCLUDE_DIR: ${{ env.SODIUM_INCLUDE_DIR }}"
          echo "OPENSSL_ROOT_DIR: ${{ env.OPENSSL_ROOT_DIR }}"
          echo "OPENSSL_INCLUDE_DIR: ${{ env.OPENSSL_INCLUDE_DIR }}"
          echo "OPENSSL_CRYPTO_LIBRARY: ${{ env.OPENSSL_CRYPTO_LIBRARY }}"
          echo "OPENSSL_SSL_LIBRARY: ${{ env.OPENSSL_SSL_LIBRARY }}"
          echo "CMAKE_PREFIX_PATH: ${{ env.CMAKE_PREFIX_PATH }}"
          echo "CMAKE_MODULE_PATH: ${{ env.CMAKE_MODULE_PATH }}"
          echo "Qt5_DIR: ${{ env.Qt5_DIR }}"
          echo "PATH: ${{ env.PATH }}"

      - name: Configure CMake for Windows
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          cmake -S . -B build -G "MinGW Makefiles" \
            -DOPENSSL_ROOT_DIR="${{ env.OPENSSL_ROOT_DIR }}" \
            -DOPENSSL_INCLUDE_DIR="${{ env.OPENSSL_INCLUDE_DIR }}" \
            -DOPENSSL_CRYPTO_LIBRARY="${{ env.OPENSSL_CRYPTO_LIBRARY }}" \
            -DOPENSSL_SSL_LIBRARY="${{ env.OPENSSL_SSL_LIBRARY }}" \
            -DCMAKE_PREFIX_PATH="${{ env.CMAKE_PREFIX_PATH }}" \
            -DCMAKE_MODULE_PATH="${{ env.CMAKE_MODULE_PATH }}" \
            -DQt5_DIR="${{ env.Qt5_DIR }}"

      - name: Configure CMake for macOS/Linux
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          cmake -S . -B build -G Ninja

      - name: Build for Windows
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: cmake --build build --config Release

      - name: Build for macOS/Linux
        if: matrix.os != 'windows-latest'
        shell: bash
        run: cmake --build build --config Release

      - name: Copy DLLs for Windows
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          echo "Creating necessary directories..."
          mkdir -p build/platforms || { echo "Failed to create build/platforms"; exit 1; }
          mkdir -p build/styles || { echo "Failed to create build/styles"; exit 1; }
      
          echo "Finding ntldd.exe..."
          NTLDD_PATH=$(find /mingw64/bin -name "ntldd.exe" | head -n 1)
          if [ -z "$NTLDD_PATH" ]; then
              echo "ntldd.exe not found!"
              exit 1
          fi
          echo "ntldd.exe found at $NTLDD_PATH"
      
          echo "Checking if build/EncryptionApp.exe exists..."
          if [ ! -f "build/EncryptionApp.exe" ]; then
              echo "build/EncryptionApp.exe not found!"
              exit 1
          fi
      
          echo "Running ntldd and capturing DLLs..."
          DLL_PATHS=$(mktemp)
          "$NTLDD_PATH" -R build/EncryptionApp.exe | while IFS= read -r line
          do
              if [[ "$line" =~ [A-Za-z]:\\[^[:space:]]+\.dll ]]; then
                  dll_path="${BASH_REMATCH[0]}"
                  echo "$dll_path" >> "$DLL_PATHS"
              fi
          done
      
          echo "Copying DLLs to build directory..."
          cat "$DLL_PATHS" | while IFS= read -r dll_path
          do
              if [[ "$dll_path" != *Windows* ]]; then
                  echo "Copying $dll_path to build directory"
                  cp "$dll_path" build/ || { echo "Failed to copy $dll_path"; exit 1; }
              else
                  echo "Skipping system DLL $dll_path"
              fi
          done
          rm "$DLL_PATHS"
      
          echo "Copying additional required DLLs..."
          cp /mingw64/bin/libglib-2.0-0.dll build/ || { echo "Failed to copy libglib-2.0-0.dll"; exit 1; }
          cp /mingw64/bin/libgraphite2.dll build/ || { echo "Failed to copy libgraphite2.dll"; exit 1; }
          cp /mingw64/bin/libintl-8.dll build/ || { echo "Failed to copy libintl-8.dll"; exit 1; }
      
          echo "Copying Qt plugins..."
          cp /mingw64/share/qt5/plugins/platforms/qwindows.dll build/platforms/ || { echo "Failed to copy qwindows.dll"; exit 1; }
          cp /mingw64/share/qt5/plugins/styles/qwindowsvistastyle.dll build/styles/ || { echo "Failed to copy qwindowsvistastyle.dll"; exit 1; }
      
          echo "All DLLs and plugins copied successfully."

      - name: Install GUI testing dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb x11-utils xdotool scrot libxcb-xinerama0 xautomation x11-apps wmctrl

      - name: Run GUI tests and capture screenshots (Linux)
        id: run_tests
        if: matrix.os == 'ubuntu-latest'
        run: |
          set -x  # Print each command for debugging
          
          log_and_screenshot() {
            echo "$1"
            scrot "screenshots/$(printf %02d $2)_$3.png"
            sleep 2
          }

          prepare_screenshots() {
            echo "Preparing screenshots..."
            artifact_name="linux-screenshots-$(date +%s)"
            tar -czf "$artifact_name.tar.gz" screenshots
            echo "ARTIFACT_NAME=$artifact_name" >> $GITHUB_OUTPUT
          }
          
          trap prepare_screenshots EXIT

          # Start Xvfb
          Xvfb :99 -screen 0 1024x768x24 &
          sleep 5  # Wait for Xvfb to start
          export DISPLAY=:99

          # Verify Xvfb is running
          if ! xdpyinfo >/dev/null 2>&1; then
            echo "Xvfb failed to start"
            exit 1
          fi
          
          echo "test" > test.txt
          mkdir -p screenshots

          # Set Qt configurations
          export QT_DEBUG_PLUGINS=1
          export QT_QPA_PLATFORM=xcb
          export QT_XCB_DEBUG=1
          export XDG_RUNTIME_DIR=/tmp/runtime-runner

          log_and_screenshot "Starting the application" 1 "before_start"
          ./build/EncryptionApp > app_output.log 2>&1 &
          APP_PID=$!
          sleep 10

          log_and_screenshot "Application started" 2 "after_start"

          # Get window information
          WINDOW_ID=$(xdotool search --name "Open Encryption UI" | head -n 1)
          if [ -z "$WINDOW_ID" ]; then
            echo "Failed to find application window"
            cat app_output.log
            exit 1
          fi
          echo "Window ID: $WINDOW_ID"
          xwininfo -id $WINDOW_ID
          xprop -id $WINDOW_ID

          log_and_screenshot "Window info gathered" 3 "window_info"

          # Try to send keystrokes directly to the window
          echo "Attempting to input file path"
          xdotool key --window $WINDOW_ID Tab
          xdotool type --window $WINDOW_ID "$(pwd)/test.txt"
          
          log_and_screenshot "After file path input" 4 "after_file_path"

          echo "Attempting to input password"
          xdotool key --window $WINDOW_ID Tab Tab
          xdotool type --window $WINDOW_ID "testpassword"
          
          log_and_screenshot "After password input" 5 "after_password"

          echo "Attempting to click Encrypt button"
          xdotool key --window $WINDOW_ID Tab Tab Tab Tab Tab Tab Tab
          xdotool key --window $WINDOW_ID Return
          sleep 5
          
          log_and_screenshot "After encrypt click" 6 "after_encrypt_click"

          if [ -f "test.txt.enc" ]; then
            echo "Encryption successful"
          else
            echo "Encryption failed"
            cat app_output.log
          fi

          log_and_screenshot "Test completed" 7 "final"

          echo "Killing application"
          kill $APP_PID

          echo "Test script completed"

      - name: Upload screenshots and logs
        if: always() && matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.run_tests.outputs.ARTIFACT_NAME || 'linux-screenshots-and-logs' }}
          path: |
            ./*.tar.gz
            app_output.log

      # - name: Install GUI testing dependencies (macOS)
      #   if: matrix.os == 'macos-latest'
      #   run: brew install xdotool

      # - name: Run GUI tests (macOS)
      #   if: matrix.os == 'macos-latest'
      #   run: |
      #     # Start Xquartz in the background (if needed)
      #     open -a XQuartz
      #     sleep 5
      #     export DISPLAY=:0

      #     # Create test file
      #     echo "test" > test.txt

      #     # Start the application
      #     ./build/EncryptionApp &
      #     APP_PID=$!

      #     # Wait for the application to start
      #     sleep 5

      #     # Interact with the application using xdotool for encryption
      #     xdotool key Tab  # Focus on file path input
      #     xdotool type "$(pwd)/test.txt"
      #     xdotool key Tab Tab  # Navigate to password field
      #     xdotool type "testpassword"
      #     xdotool key Tab Tab Tab Tab Tab Tab Tab  # Navigate to Encrypt button (7 tabs)
      #     xdotool key Return

      #     # Wait for encryption to complete
      #     sleep 5

      #     # Close the application
      #     kill $APP_PID

      #     # Verify encryption
      #     if [ -f "test.txt.enc" ]; then
      #       echo "Encryption successful"
      #     else
      #       echo "Encryption failed"
      #       exit 1
      #     fi

      #     # Remove original file
      #     rm test.txt

      #     # Start the application again for decryption
      #     ./build/EncryptionApp &
      #     APP_PID=$!

      #     # Wait for the application to start
      #     sleep 5

      #     # Interact with the application for decryption
      #     xdotool key Tab  # Focus on file path input
      #     xdotool type "$(pwd)/test.txt.enc"
      #     xdotool key Tab Tab  # Navigate to password field
      #     xdotool type "testpassword"
      #     xdotool key Tab Tab Tab Tab Tab Tab Tab Tab  # Navigate to Decrypt button (8 tabs)
      #     xdotool key Return

      #     # Wait for decryption to complete
      #     sleep 5

      #     # Close the application
      #     kill $APP_PID

      #     # Verify decryption
      #     if [ -f "test.txt" ] && [ "$(cat test.txt)" = "test" ]; then
      #       echo "Decryption successful"
      #     else
      #       echo "Decryption failed"
      #       exit 1
      #     fi

      #     # Clean up
      #     rm test.txt test.txt.enc

      # - name: Run GUI tests (Windows)
      #   if: matrix.os == 'windows-latest'
      #   shell: pwsh
      #   run: |
      #     # Create test file
      #     "test" | Out-File -FilePath test.txt

      #     # Start the application
      #     Start-Process .\build\EncryptionApp.exe
      #     Start-Sleep -Seconds 5

      #     # Function to send keystrokes
      #     function Send-Keystrokes($keys) {
      #       Add-Type -AssemblyName System.Windows.Forms
      #       [System.Windows.Forms.SendKeys]::SendWait($keys)
      #     }

      #     # Interact with the application for encryption
      #     Send-Keystrokes("{TAB}")  # Focus on file path input
      #     Send-Keystrokes("$pwd\test.txt")
      #     Send-Keystrokes("{TAB 2}")  # Navigate to password field
      #     Send-Keystrokes("testpassword")
      #     Send-Keystrokes("{TAB 7}")  # Navigate to Encrypt button (7 tabs)
      #     Send-Keystrokes("{ENTER}")

      #     # Wait for encryption to complete
      #     Start-Sleep -Seconds 5

      #     # Close the application
      #     Stop-Process -Name EncryptionApp

      #     # Verify encryption
      #     if (Test-Path "test.txt.enc") {
      #       Write-Host "Encryption successful"
      #     } else {
      #       Write-Host "Encryption failed"
      #       exit 1
      #     }

      #     # Remove original file
      #     Remove-Item test.txt

      #     # Start the application again for decryption
      #     Start-Process .\build\EncryptionApp.exe
      #     Start-Sleep -Seconds 5

      #     # Interact with the application for decryption
      #     Send-Keystrokes("{TAB}")  # Focus on file path input
      #     Send-Keystrokes("$pwd\test.txt.enc")
      #     Send-Keystrokes("{TAB 2}")  # Navigate to password field
      #     Send-Keystrokes("testpassword")
      #     Send-Keystrokes("{TAB 8}")  # Navigate to Decrypt button (8 tabs)
      #     Send-Keystrokes("{ENTER}")

      #     # Wait for decryption to complete
      #     Start-Sleep -Seconds 5

      #     # Close the application
      #     Stop-Process -Name EncryptionApp

      #     # Verify decryption
      #     if ((Test-Path "test.txt") -and ((Get-Content "test.txt") -eq "test")) {
      #       Write-Host "Decryption successful"
      #     } else {
      #       Write-Host "Decryption failed"
      #       exit 1
      #     }

      #     # Clean up
      #     Remove-Item test.txt, test.txt.enc

      # - name: Archive build artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ${{ matrix.os }}-build
      #     path: build/

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Linux build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-latest-build
          path: build-linux/
          if-no-files-found: error

      - name: Download macOS build artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-latest-build
          path: build-macos/
          if-no-files-found: error

      - name: Download Windows build artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-latest-build
          path: build-windows/
          if-no-files-found: error

      - name: Create release directory
        run: mkdir -p release

      - name: Zip Linux build
        run: |
          cd build-linux
          zip -r ../release/linux-build.zip .

      - name: Zip macOS build
        run: |
          cd build-macos
          zip -r ../release/macos-build.zip .

      - name: Zip Windows build
        run: |
          cd build-windows
          zip -r ../release/windows-build.zip .

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/linux-build.zip
            release/macos-build.zip
            release/windows-build.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
