name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v2

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build git qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools libssl-dev libsodium-dev libargon2-dev

      - name: Install Homebrew (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" || { echo "Homebrew installation failed"; exit 1; }

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install qt@5 openssl libsodium argon2 ninja
          brew link --force qt@5

      - name: Set environment variables for macOS
        if: matrix.os == 'macos-latest'
        run: |
          echo "ARGON2_LIB_DIR=$(brew --prefix argon2)/lib" >> $GITHUB_ENV
          echo "ARGON2_INCLUDE_DIR=$(brew --prefix argon2)/include" >> $GITHUB_ENV
          echo "SODIUM_LIB_DIR=$(brew --prefix libsodium)/lib" >> $GITHUB_ENV
          echo "SODIUM_INCLUDE_DIR=$(brew --prefix libsodium)/include" >> $GITHUB_ENV
          echo "Qt5_DIR=$(brew --prefix qt@5)/lib/cmake/Qt5" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$(brew --prefix qt@5)" >> $GITHUB_ENV

      - name: Install Chocolatey (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex "& { $(irm https://chocolatey.org/install.ps1) }"

      - name: Cache Chocolatey Packages (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v2
        with:
          path: C:\ProgramData\chocolatey\lib
          key: ${{ runner.os }}-choco-${{ hashFiles('CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-choco-

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
          choco install qt5-default -y
          choco install argon2 -y
          choco install libsodium -y
          choco install mingw --version 8.1.0 -y
          choco install make -y

      - name: Install 7-Zip (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install 7zip -y

      - name: Download and Install OpenSSL (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Invoke-WebRequest -Uri https://slproweb.com/download/Win64OpenSSL-3_3_1.msi -OutFile Win64OpenSSL-3_3_1.msi
          Start-Process msiexec.exe -ArgumentList '/i', 'Win64OpenSSL-3_3_1.msi', '/quiet', '/norestart' -NoNewWindow -Wait
          echo "OPENSSL_ROOT_DIR=C:\Program Files\OpenSSL-Win64" >> $env:GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=C:\Program Files\OpenSSL-Win64\include" >> $env:GITHUB_ENV
          echo "OPENSSL_CRYPTO_LIBRARY=C:\Program Files\OpenSSL-Win64\lib\libcrypto.lib" >> $env:GITHUB_ENV
          echo "OPENSSL_SSL_LIBRARY=C:\Program Files\OpenSSL-Win64\lib\libssl.lib" >> $env:GITHUB_ENV

      - name: Set up Qt (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $qtBase = "C:\tools\qt"
          $qtVersion = "5.15.2"
          $qtPath = Join-Path $qtBase $qtVersion
          echo "Qt5_DIR=$qtPath\mingw81_64\lib\cmake\Qt5" >> $env:GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$qtPath\mingw81_64" >> $env:GITHUB_ENV

      - name: Debug environment variables after setting
        run: |
          echo "Qt5_DIR: ${{ env.Qt5_DIR }}"
          echo "CMAKE_PREFIX_PATH: ${{ env.CMAKE_PREFIX_PATH }}"
          echo "OPENSSL_ROOT_DIR: ${{ env.OPENSSL_ROOT_DIR }}"
          echo "OPENSSL_INCLUDE_DIR: ${{ env.OPENSSL_INCLUDE_DIR }}"
          echo "OPENSSL_CRYPTO_LIBRARY: ${{ env.OPENSSL_CRYPTO_LIBRARY }}"
          echo "OPENSSL_SSL_LIBRARY: ${{ env.OPENSSL_SSL_LIBRARY }}"

      - name: Build Argon2 from source (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          git clone --depth 1 https://github.com/P-H-C/phc-winner-argon2.git
          cd phc-winner-argon2
          gcc -std=c89 -O3 -Wall -g -Iinclude -Isrc -c src/argon2.c src/core.c src/blake2/blake2b.c src/thread.c src/encoding.c src/ref.c src/run.c
          ar rcs libargon2.a argon2.o core.o blake2b.o thread.o encoding.o ref.o run.o
          mkdir -p C:\argon2\lib
          mkdir -p C:\argon2\include
          Copy-Item -Path "libargon2.a" -Destination "C:\argon2\lib" -Force
          Copy-Item -Path "include\argon2.h" -Destination "C:\argon2\include" -Force

      - name: Set environment variables for Windows
        if: matrix.os == 'windows-latest'
        run: |
          echo "ARGON2_LIB_DIR=C:\argon2\lib" >> $env:GITHUB_ENV
          echo "ARGON2_INCLUDE_DIR=C:\argon2\include" >> $env:GITHUB_ENV
          echo "SODIUM_LIB_DIR=C:\Program Files\libsodium" >> $env:GITHUB_ENV
          echo "SODIUM_INCLUDE_DIR=C:\Program Files\libsodium\include" >> $env:GITHUB_ENV

      - name: Debug environment variables before configure
        run: |
          echo "ARGON2_LIB_DIR: ${{ env.ARGON2_LIB_DIR }}"
          echo "ARGON2_INCLUDE_DIR: ${{ env.ARGON2_INCLUDE_DIR }}"
          echo "SODIUM_LIB_DIR: ${{ env.SODIUM_LIB_DIR }}"
          echo "SODIUM_INCLUDE_DIR: ${{ env.SODIUM_INCLUDE_DIR }}"
          echo "Qt5_DIR: ${{ env.Qt5_DIR }}"
          echo "CMAKE_PREFIX_PATH: ${{ env.CMAKE_PREFIX_PATH }}"
          echo "OPENSSL_ROOT_DIR: ${{ env.OPENSSL_ROOT_DIR }}"
          echo "OPENSSL_INCLUDE_DIR: ${{ env.OPENSSL_INCLUDE_DIR }}"
          echo "OPENSSL_CRYPTO_LIBRARY: ${{ env.OPENSSL_CRYPTO_LIBRARY }}"
          echo "OPENSSL_SSL_LIBRARY: ${{ env.OPENSSL_SSL_LIBRARY }}"
          echo "PATH: ${{ env.PATH }}"

      - name: Configure CMake
        shell: bash
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            cmake -S . -B build -G "MinGW Makefiles" -DOPENSSL_ROOT_DIR="${{ env.OPENSSL_ROOT_DIR }}" -DOPENSSL_INCLUDE_DIR="${{ env.OPENSSL_INCLUDE_DIR }}" -DOPENSSL_CRYPTO_LIBRARY="${{ env.OPENSSL_CRYPTO_LIBRARY }}" -DOPENSSL_SSL_LIBRARY="${{ env.OPENSSL_SSL_LIBRARY }}" -DCMAKE_PREFIX_PATH="${{ env.CMAKE_PREFIX_PATH }}" -DQt5_DIR="${{ env.Qt5_DIR }}"
          else
            cmake -S . -B build -G Ninja
          fi

      - name: Build
        run: cmake --build build --config Release

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-build
          path: build/

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: builds/

      - name: Create release directory
        run: mkdir -p release

      - name: Copy build artifacts to release directory
        run: |
          cp -r builds/ubuntu-latest-build release/linux
          cp -r builds/macos-latest-build release/macos
          cp -r builds/windows-latest-build release/windows

      - name: Create zip of source code
        run: zip -r release/source.zip . -x .git\*

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release
          asset_name: release.zip
          asset_content_type: application/zip
