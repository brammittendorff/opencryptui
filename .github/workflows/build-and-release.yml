name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v2

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build git qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools libssl-dev libsodium-dev libargon2-dev

      - name: Install Homebrew (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" || { echo "Homebrew installation failed"; exit 1; }

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install qt@5 openssl libsodium argon2 ninja
          brew link --force qt@5

      - name: Set environment variables for macOS
        if: matrix.os == 'macos-latest'
        run: |
          echo "ARGON2_LIB_DIR=$(brew --prefix argon2)/lib" >> $GITHUB_ENV
          echo "ARGON2_INCLUDE_DIR=$(brew --prefix argon2)/include" >> $GITHUB_ENV
          echo "SODIUM_LIB_DIR=$(brew --prefix libsodium)/lib" >> $GITHUB_ENV
          echo "SODIUM_INCLUDE_DIR=$(brew --prefix libsodium)/include" >> $GITHUB_ENV

      - name: Debug environment variables (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          echo "ARGON2_LIB_DIR=$ARGON2_LIB_DIR"
          echo "ARGON2_INCLUDE_DIR=$ARGON2_INCLUDE_DIR"
          echo "SODIUM_LIB_DIR=$SODIUM_LIB_DIR"
          echo "SODIUM_INCLUDE_DIR=$SODIUM_INCLUDE_DIR"

      - name: Configure CMake (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          QT_DIR=$(brew --prefix qt@5)
          cmake -S . -B build -G Ninja -DCMAKE_PREFIX_PATH=$QT_DIR -DQt5_DIR=$QT_DIR/lib/cmake/Qt5 -DQt5Core_DIR=$QT_DIR/lib/cmake/Qt5Core -DQt5Gui_DIR=$QT_DIR/lib/cmake/Qt5Gui -DQt5Widgets_DIR=$QT_DIR/lib/cmake/Qt5Widgets

      - name: Build (macOS)
        if: matrix.os == 'macos-latest'
        run: cmake --build build --config Release

      - name: Install Chocolatey and dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex "& { $(irm https://chocolatey.org/install.ps1) }"
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
          choco install git -y
          choco install qt5-sdk -y
          choco install openssl -y
          choco install libsodium -y
          choco install mingw --version 8.1.0 -y
          choco install make -y

      - name: Check MinGW Installation (Windows)
        if: matrix.os == 'windows-latest'
        run: g++ --version

      - name: Build Argon2 from source (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          git clone --depth 1 https://github.com/P-H-C/phc-winner-argon2.git
          cd phc-winner-argon2
          gcc -std=c89 -O3 -Wall -g -Iinclude -Isrc -c src/argon2.c src/core.c src/blake2/blake2b.c src/thread.c src/encoding.c src/ref.c src/run.c
          ar rcs libargon2.a argon2.o core.o blake2b.o thread.o encoding.o ref.o run.o
          mkdir -p C:\argon2\lib
          mkdir -p C:\argon2\include
          Copy-Item -Path "libargon2.a" -Destination "C:\argon2\lib" -Force
          Copy-Item -Path "include\argon2.h" -Destination "C:\argon2\include" -Force

      - name: Set environment variables for Windows
        if: matrix.os == 'windows-latest'
        run: |
          echo "ARGON2_LIB_DIR=C:\argon2\lib" >> $env:GITHUB_ENV
          echo "ARGON2_INCLUDE_DIR=C:\argon2\include" >> $env:GITHUB_ENV
          echo "SODIUM_LIB_DIR=C:\Program Files\libsodium" >> $env:GITHUB_ENV
          echo "SODIUM_INCLUDE_DIR=C:\Program Files\libsodium\include" >> $env:GITHUB_ENV
          echo "QT5_DIR=C:\tools\qt5-sdk\Qt5.15.2\5.15.2\mingw81_64\lib\cmake\Qt5" >> $env:GITHUB_ENV

      - name: Debug environment variables (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "ARGON2_LIB_DIR=$env:ARGON2_LIB_DIR"
          echo "ARGON2_INCLUDE_DIR=$env:ARGON2_INCLUDE_DIR"
          echo "SODIUM_LIB_DIR=$env:SODIUM_LIB_DIR"
          echo "SODIUM_INCLUDE_DIR=$env:SODIUM_INCLUDE_DIR"
          echo "QT5_DIR=$env:QT5_DIR"

      - name: Configure CMake
        run: |
          if ("${{ matrix.os }}" -eq "windows-latest") {
            cmake -S . -B build -G "MinGW Makefiles" -DQt5_DIR="$env:QT5_DIR"
          } else {
            cmake -S . -B build -G Ninja
          }

      - name: Build
        run: cmake --build build --config Release

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-build
          path: build/

  release_linux:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-latest-build
          path: builds/linux/

      - name: Create release directory
        run: mkdir -p release

      - name: Copy build artifacts to release directory
        run: cp -r builds/linux release/linux

      - name: Create zip of source code
        run: zip -r release/source.zip . -x .git\*

      - name: Upload release assets
        uses: actions/upload-artifact@v4
        with:
          name: release
          path: release/

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: "Release ${{ github.ref }} - Linux"
          draft: false
          prerelease: false

      - name: Upload release assets to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/
          asset_name: release_linux.zip
          asset_content_type: application/zip

  release_macos:
    needs: build
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-latest-build
          path: builds/macos/

      - name: Create release directory
        run: mkdir -p release

      - name: Copy build artifacts to release directory
        run: cp -r builds/macos release/macos

      - name: Create zip of source code
        run: zip -r release/source.zip . -x .git\*

      - name: Upload release assets
        uses: actions/upload-artifact@v4
        with:
          name: release
          path: release/

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: "Release ${{ github.ref }} - macOS"
          draft: false
          prerelease: false

      - name: Upload release assets to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/
          asset_name: release_macos.zip
          asset_content_type: application/zip

  release_windows:
    needs: build
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-latest-build
          path: builds/windows/

      - name: Create release directory
        run: mkdir -p release

      - name: Copy build artifacts to release directory
        run: cp -r builds/windows release/windows

      - name: Create zip of source code
        run: zip -r release/source.zip . -x .git\*

      - name: Upload release assets
        uses: actions/upload-artifact@v4
        with:
          name: release
          path: release/

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: "Release ${{ github.ref }} - Windows"
          draft: false
          prerelease: false

      - name: Upload release assets to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/
          asset_name: release_windows.zip
          asset_content_type: application/zip
