name: Build and Release

on:
  push:
    branches:
      - '**'   # Runs the build for all branches when pushed
    tags:
      - 'v*'   # Triggers release when a tag is pushed
  pull_request:
    branches:
      - '**'   # Runs the build for all pull requests

permissions:
  contents: write
  packages: write
  deployments: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Setup minimal logging (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p ~/.config/QtProject
          echo -e "[Logging]\ndefault.debug=false\ndefault.warning=false" > ~/.config/QtProject/qtlogging.ini

      - name: Setup minimal logging (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          # Windows uses AppData/Roaming path for Qt settings
          mkdir -p "$APPDATA/QtProject"
          echo -e "[Logging]\r\ndefault.debug=false\r\ndefault.warning=false" > "$APPDATA/QtProject/qtlogging.ini"

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up CMake
        if: matrix.os != 'windows-latest'
        uses: jwlawson/actions-setup-cmake@v2

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build git qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools libssl-dev libsodium-dev libargon2-dev

      - name: Install Homebrew (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" || { echo "Homebrew installation failed"; exit 1; }

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Use --no-upgrade to avoid "already installed" warnings
          for pkg in qt@5 openssl libsodium argon2 ninja; do
            brew list $pkg &>/dev/null && echo "$pkg is already installed" || brew install $pkg
          done
          brew link --force qt@5

      - name: Set environment variables for macOS
        if: matrix.os == 'macos-latest'
        run: |
          echo "ARGON2_LIB_DIR=$(brew --prefix argon2)/lib" >> $GITHUB_ENV
          echo "ARGON2_INCLUDE_DIR=$(brew --prefix argon2)/include" >> $GITHUB_ENV
          echo "SODIUM_LIB_DIR=$(brew --prefix libsodium)/lib" >> $GITHUB_ENV
          echo "SODIUM_INCLUDE_DIR=$(brew --prefix libsodium)/include" >> $GITHUB_ENV
          echo "Qt5_DIR=$(brew --prefix qt@5)/lib/cmake/Qt5" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$(brew --prefix qt@5)" >> $GITHUB_ENV
          echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl)" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$(brew --prefix openssl)/include" >> $GITHUB_ENV
          echo "OPENSSL_LIBRARIES=$(brew --prefix openssl)/lib" >> $GITHUB_ENV

      - name: Setup MSYS2 (Windows)
        if: matrix.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-openssl
            mingw-w64-x86_64-libsodium
            mingw-w64-x86_64-argon2
            mingw-w64-x86_64-qt5-base
            mingw-w64-x86_64-qt5-tools
            cmake
            gcc
            mingw-w64-x86_64-ntldd
            git

      - name: Find Qt5 CMake directory
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          QT5_CONFIG=$(find /mingw64/ -name "Qt5Config.cmake" -o -name "qt5-config.cmake" | head -n 1)
          if [ -z "$QT5_CONFIG" ]; then
            echo "Qt5Config.cmake not found!"
            exit 1
          fi
          QT5_DIR=$(dirname ${QT5_CONFIG})
          echo "Qt5_DIR=${QT5_DIR}" >> $GITHUB_ENV
          echo "CMAKE_MODULE_PATH=${QT5_DIR}" >> $GITHUB_ENV

      - name: Build and set up dependencies (Windows)
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          echo "Setting up environment variables..."
          echo "OPENSSL_ROOT_DIR=/mingw64" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/mingw64/include" >> $GITHUB_ENV
          echo "OPENSSL_CRYPTO_LIBRARY=/mingw64/lib/libcrypto.a" >> $GITHUB_ENV
          echo "OPENSSL_SSL_LIBRARY=/mingw64/lib/libssl.a" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=/mingw64" >> $GITHUB_ENV
          echo "ARGON2_LIB_DIR=/mingw64/lib" >> $GITHUB_ENV
          echo "ARGON2_INCLUDE_DIR=/mingw64/include" >> $GITHUB_ENV
          echo "SODIUM_LIB_DIR=/mingw64/lib" >> $GITHUB_ENV
          echo "SODIUM_INCLUDE_DIR=/mingw64/include" >> $GITHUB_ENV
          echo "/mingw64/bin" >> $GITHUB_PATH

          echo "Verifying installations..."
          pacman -Q mingw-w64-x86_64-gcc mingw-w64-x86_64-cmake mingw-w64-x86_64-ninja mingw-w64-x86_64-openssl mingw-w64-x86_64-libsodium mingw-w64-x86_64-argon2 mingw-w64-x86_64-qt5-base mingw-w64-x86_64-qt5-tools

      - name: Debug environment variables
        run: |
          echo "ARGON2_LIB_DIR: ${{ env.ARGON2_LIB_DIR }}"
          echo "ARGON2_INCLUDE_DIR: ${{ env.ARGON2_INCLUDE_DIR }}"
          echo "SODIUM_LIB_DIR: ${{ env.SODIUM_LIB_DIR }}"
          echo "SODIUM_INCLUDE_DIR: ${{ env.SODIUM_INCLUDE_DIR }}"
          echo "OPENSSL_ROOT_DIR: ${{ env.OPENSSL_ROOT_DIR }}"
          echo "OPENSSL_INCLUDE_DIR: ${{ env.OPENSSL_INCLUDE_DIR }}"
          echo "OPENSSL_CRYPTO_LIBRARY: ${{ env.OPENSSL_CRYPTO_LIBRARY }}"
          echo "OPENSSL_SSL_LIBRARY: ${{ env.OPENSSL_SSL_LIBRARY }}"
          echo "CMAKE_PREFIX_PATH: ${{ env.CMAKE_PREFIX_PATH }}"
          echo "CMAKE_MODULE_PATH: ${{ env.CMAKE_MODULE_PATH }}"
          echo "Qt5_DIR: ${{ env.Qt5_DIR }}"
          echo "PATH: ${{ env.PATH }}"

      - name: Configure CMake for Windows
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          cmake -S . -B build -G "MinGW Makefiles" \
            -DOPENSSL_ROOT_DIR="${{ env.OPENSSL_ROOT_DIR }}" \
            -DOPENSSL_INCLUDE_DIR="${{ env.OPENSSL_INCLUDE_DIR }}" \
            -DOPENSSL_CRYPTO_LIBRARY="${{ env.OPENSSL_CRYPTO_LIBRARY }}" \
            -DOPENSSL_SSL_LIBRARY="${{ env.OPENSSL_SSL_LIBRARY }}" \
            -DCMAKE_PREFIX_PATH="${{ env.CMAKE_PREFIX_PATH }}" \
            -DCMAKE_MODULE_PATH="${{ env.CMAKE_MODULE_PATH }}" \
            -DQt5_DIR="${{ env.Qt5_DIR }}" \
            -DCMAKE_CXX_FLAGS="-DQT_CI_BUILD -DQT_NO_DEBUG_OUTPUT -DQT_NO_WARNING_OUTPUT"

      - name: Configure CMake for macOS/Linux
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_CXX_FLAGS="-DQT_CI_BUILD -DQT_NO_DEBUG_OUTPUT -DQT_NO_WARNING_OUTPUT"

      - name: Build for Windows
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: cmake --build build --config Release

      - name: Build for macOS/Linux
        if: matrix.os != 'windows-latest'
        shell: bash
        run: cmake --build build --config Release

      # CI Test script steps have been removed in favor of direct commands in the run steps below

      - name: Copy DLLs for Windows
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          echo "Creating necessary directories for Qt plugins..."
          mkdir -p build/platforms build/styles build/imageformats build/iconengines build/printsupport
      
          echo "Finding ntldd.exe..."
          NTLDD_PATH=$(find /mingw64/bin -name "ntldd.exe" || find /mingw64 -name "ntldd.exe" 2>/dev/null || echo "")
          if [ -z "$NTLDD_PATH" ]; then
              echo "ntldd.exe not found via find, trying which..."
              NTLDD_PATH=$(which ntldd.exe 2>/dev/null || echo "")
              if [ -z "$NTLDD_PATH" ]; then
                  echo "WARNING: ntldd.exe not found, will rely on manual DLL list"
              else
                  echo "ntldd.exe found at $NTLDD_PATH"
              fi
          else
              echo "ntldd.exe found at $NTLDD_PATH"
          fi
      
          echo "Checking if build/OpenCryptUI.exe exists..."
          if [ ! -f "build/OpenCryptUI.exe" ]; then
              echo "build/OpenCryptUI.exe not found! Checking directory contents:"
              ls -la build/
              exit 1
          fi

          # List directories to help troubleshoot paths
          echo "Mingw64 directory contents (lib):"
          ls -la /mingw64/lib/ | grep -E 'sodium|argon2|ssl|crypto' || echo "No matches found"
          
          echo "Mingw64 bin directory contents:"
          ls -la /mingw64/bin/ | grep -E 'dll|\.so' | head -20
          
          echo "Looking for Qt plugins directory:"
          find /mingw64 -name "plugins" -type d | grep -i qt
          QT_PLUGIN_PATH=$(find /mingw64 -name "plugins" -type d | grep -i qt | head -1)
          echo "Using Qt plugin path: $QT_PLUGIN_PATH"
      
          if [ -n "$NTLDD_PATH" ] && [ -x "$NTLDD_PATH" ]; then
              echo "Running ntldd and capturing DLLs..."
              # Run a recursive dependency check to catch all required DLLs
              DLL_PATHS=$(mktemp)
              "$NTLDD_PATH" -R build/OpenCryptUI.exe | grep -i "mingw" | grep -v "not found" | awk '{print $3}' | sort -u > "$DLL_PATHS"
              
              echo "Copying DLLs to build directory..."
              while IFS= read -r dll_path; do
                if [[ -f "$dll_path" ]]; then
                  echo "Copying $dll_path to build directory"
                  cp "$dll_path" build/ || { echo "Failed to copy $dll_path"; }
                fi
              done < "$DLL_PATHS"
              rm "$DLL_PATHS"
          else
              echo "Skipping ntldd dependency check as ntldd was not found or not executable"
          fi
      
          echo "Copying essential system libraries..."
          # Try different naming patterns for system libraries
          cp -f /mingw64/bin/libstdc++-6.dll build/ || echo "Warning: libstdc++-6.dll not found"
          cp -f /mingw64/bin/libgcc_s_seh-1.dll build/ || echo "Warning: libgcc_s_seh-1.dll not found"
          cp -f /mingw64/bin/libwinpthread-1.dll build/ || echo "Warning: libwinpthread-1.dll not found"
          cp -f /mingw64/bin/libssp-0.dll build/ || echo "Warning: libssp-0.dll not found"
          
          echo "Copying Qt dependencies..."
          # Try to find Qt dependencies with an exhaustive approach
          for dll in libglib-2.0-0 libgraphite2 libintl-8 libbz2-1 libpcre libpcre-1 libpcre2-16-0 \
                    libharfbuzz-0 libpng16-16 zlib1 libiconv-2 libfreetype-6 libpcre16-0 \
                    libdouble-conversion libbrotlidec libbrotlicommon; do
            echo "Looking for $dll.dll..."
            cp -f /mingw64/bin/${dll}.dll build/ 2>/dev/null || \
            find /mingw64 -name "${dll}.dll" -exec cp -f {} build/ \; 2>/dev/null || \
            echo "Warning: ${dll}.dll not found"
          done
          
          echo "Copying crypto libraries..."
          # Try to find crypto libraries with more flexible patterns
          # Look for different versions of libsodium
          for sodium in libsodium-23 libsodium-26 libsodium; do
            find /mingw64 -name "${sodium}.dll" -exec cp -f {} build/ \; 2>/dev/null && break || echo "Warning: ${sodium}.dll not found"
          done
          
          # Look for different versions of libargon2
          cp -f /mingw64/bin/libargon2.dll build/ 2>/dev/null || \
          find /mingw64 -name "libargon2*.dll" -exec cp -f {} build/ \; || \
          echo "Warning: libargon2.dll not found"
          
          # Look for different versions of OpenSSL
          for ssl in libssl-1_1-x64 libssl-1.1 libssl-3 libssl-3-x64 libssl; do
            find /mingw64 -name "${ssl}.dll" -exec cp -f {} build/ \; 2>/dev/null && break || echo "Warning: ${ssl}.dll not found"
          done
          
          for crypto in libcrypto-1_1-x64 libcrypto-1.1 libcrypto-3 libcrypto-3-x64 libcrypto; do
            find /mingw64 -name "${crypto}.dll" -exec cp -f {} build/ \; 2>/dev/null && break || echo "Warning: ${crypto}.dll not found"
          done
      
          echo "Copying Qt core DLLs..."
          for qtdll in Qt5Core Qt5Gui Qt5Widgets Qt5Network Qt5DBus Qt5Xml Qt5PrintSupport; do
            cp -f /mingw64/bin/${qtdll}.dll build/ || echo "Warning: ${qtdll}.dll not found"
          done
          
          # Try optional Qt modules with flexible search
          for optqt in Qt5Svg Qt5XmlPatterns; do
            cp -f /mingw64/bin/${optqt}.dll build/ 2>/dev/null || \
            find /mingw64 -name "${optqt}.dll" -exec cp -f {} build/ \; 2>/dev/null || \
            echo "Warning: ${optqt}.dll not found (optional)"
          done
      
          echo "Copying Qt plugins..."
          # Try to use the plugin directory we found earlier
          if [ -n "$QT_PLUGIN_PATH" ]; then
            # Platform plugins (required)
            if [ -d "${QT_PLUGIN_PATH}/platforms" ]; then
              find "${QT_PLUGIN_PATH}/platforms" -name "qwindows.dll" -exec cp -f {} build/platforms/ \; || echo "Warning: qwindows.dll not found"
              find "${QT_PLUGIN_PATH}/platforms" -name "qminimal.dll" -exec cp -f {} build/platforms/ \; || echo "Warning: qminimal.dll not found"
            fi
            
            # Style plugins (required)
            if [ -d "${QT_PLUGIN_PATH}/styles" ]; then
              find "${QT_PLUGIN_PATH}/styles" -name "qwindowsvistastyle.dll" -exec cp -f {} build/styles/ \; || echo "Warning: qwindowsvistastyle.dll not found"
            fi
            
            # Image format plugins (core ones required, others optional)
            if [ -d "${QT_PLUGIN_PATH}/imageformats" ]; then
              # Core formats (required)
              for fmt in qjpeg qgif qico; do
                find "${QT_PLUGIN_PATH}/imageformats" -name "${fmt}.dll" -exec cp -f {} build/imageformats/ \; || echo "Warning: ${fmt}.dll not found"
              done
              
              # Optional formats
              for optfmt in qsvg qpng qicns qtga qtiff qwbmp qwebp; do
                find "${QT_PLUGIN_PATH}/imageformats" -name "${optfmt}.dll" -exec cp -f {} build/imageformats/ \; 2>/dev/null || echo "Warning: ${optfmt}.dll not found (optional)"
              done
            fi
            
            # Icon engines (optional)
            if [ -d "${QT_PLUGIN_PATH}/iconengines" ]; then
              find "${QT_PLUGIN_PATH}/iconengines" -name "qsvgicon.dll" -exec cp -f {} build/iconengines/ \; 2>/dev/null || echo "Warning: qsvgicon.dll not found (optional)"
            fi
            
            # Print support (optional but useful)
            if [ -d "${QT_PLUGIN_PATH}/printsupport" ]; then
              find "${QT_PLUGIN_PATH}/printsupport" -name "windowsprintersupport.dll" -exec cp -f {} build/printsupport/ \; 2>/dev/null || echo "Warning: windowsprintersupport.dll not found (optional)"
            fi
          else
            echo "WARNING: Qt plugin directory not found - skipping plugin copying"
          fi
          
          # Copy resource files
          echo "Copying resources..."
          if [ -d "resources" ]; then
            cp -rf resources build/ || echo "Warning: Failed to copy resources directory"
          else
            echo "WARNING: Resources directory not found in project root"
            find . -name "resources" -type d | head -5
          fi
          
          echo "Creating Qt configuration file..."
          cat > build/qt.conf << EOF
          [Paths]
          Prefix = .
          Plugins = .
          Imports = ./imports
          Qml2Imports = ./qml
          EOF
          
          echo "Listing the files copied to build directory:"
          ls -la build/
          echo "Listing platform plugins:"
          ls -la build/platforms/ || echo "No platform plugins found!"
          
          echo "DLL and plugin copying completed."

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-build
          path: build/

      - name: Run tests (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install -y xvfb
          xvfb-run --auto-servernum --server-args="-screen 0 1024x768x24" cmake --build build --target all
          cd build
          mkdir -p Testing/Temporary
          chmod +x run_tests.sh
          echo "Running tests with filtered output..."
          xvfb-run --auto-servernum --server-args="-screen 0 1024x768x24" ./run_tests.sh -v2 | tee Testing/Temporary/LastTest.log

      - name: Run tests (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          cmake --build build --target all
          cd build
          mkdir -p Testing/Temporary
          # Copy macOS-specific test script
          cp ../scripts/run_tests_mac.sh .
          chmod +x run_tests_mac.sh
          echo "Running tests with filtered output..."
          ./run_tests_mac.sh -v2 | tee Testing/Temporary/LastTest.log

      - name: Run tests (Windows)
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          cd build
          
          echo "Directory contents of build:"
          dir
          
          if not exist Testing\Temporary mkdir Testing\Temporary
          
          echo "Running tests with filtered output..."
          
          if exist run_tests.bat (
            echo "Found run_tests.bat, running tests..."
            run_tests.bat -v2
            rem Save output to a log file for artifacts
            run_tests.bat -v2 > Testing\Temporary\LastTest.log 2>&1
          ) else if exist OpenCryptUITest.exe (
            echo "run_tests.bat not found, running executable directly..."
            set QT_LOGGING_RULES=*.debug=false
            set QT_MESSAGE_PATTERN=[%%{type}] %%{message}
            OpenCryptUITest.exe -v2
            rem Save output to a log file for artifacts
            OpenCryptUITest.exe -v2 > Testing\Temporary\LastTest.log 2>&1
          ) else (
            echo "ERROR: Test executable not found!"
            dir
            exit 1
          )

      # Upload test results
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}
          path: build/Testing/Temporary/LastTest.log
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Linux build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-latest-build
          path: build-linux/
          if-no-files-found: error

      - name: Download macOS build artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-latest-build
          path: build-macos/
          if-no-files-found: error

      - name: Download Windows build artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-latest-build
          path: build-windows/
          if-no-files-found: error
          
      - name: Create resources directory for builds if needed
        run: |
          mkdir -p build-linux/resources 2>/dev/null || true
          mkdir -p build-macos/resources 2>/dev/null || true
          mkdir -p build-windows/resources 2>/dev/null || true

      - name: Create release directory
        run: mkdir -p release

      - name: Zip Linux build
        run: |
          cd build-linux
          zip -r ../release/opencryptui-linux-build.zip .

      - name: Zip macOS build
        run: |
          cd build-macos
          zip -r ../release/opencryptui-macos-build.zip .

      - name: Zip Windows build
        run: |
          cd build-windows
          zip -r ../release/opencryptui-windows-build.zip .

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/opencryptui-linux-build.zip
            release/opencryptui-macos-build.zip
            release/opencryptui-windows-build.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
