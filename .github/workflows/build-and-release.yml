name: Build and Release

on:
  push:
    branches:
      - '**'   # Runs the build for all branches when pushed
    tags:
      - 'v*'   # Triggers release when a tag is pushed
  pull_request:
    branches:
      - '**'   # Runs the build for all pull requests

permissions:
  contents: write
  packages: write
  deployments: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up CMake
        if: matrix.os != 'windows-latest'
        uses: jwlawson/actions-setup-cmake@v2

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build git qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools libssl-dev libsodium-dev libargon2-dev

      - name: Install Homebrew (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" || { echo "Homebrew installation failed"; exit 1; }

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install qt@5 openssl libsodium argon2 ninja
          brew link --force qt@5

      - name: Set environment variables for macOS
        if: matrix.os == 'macos-latest'
        run: |
          echo "ARGON2_LIB_DIR=$(brew --prefix argon2)/lib" >> $GITHUB_ENV
          echo "ARGON2_INCLUDE_DIR=$(brew --prefix argon2)/include" >> $GITHUB_ENV
          echo "SODIUM_LIB_DIR=$(brew --prefix libsodium)/lib" >> $GITHUB_ENV
          echo "SODIUM_INCLUDE_DIR=$(brew --prefix libsodium)/include" >> $GITHUB_ENV
          echo "Qt5_DIR=$(brew --prefix qt@5)/lib/cmake/Qt5" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$(brew --prefix qt@5)" >> $GITHUB_ENV
          echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl)" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$(brew --prefix openssl)/include" >> $GITHUB_ENV
          echo "OPENSSL_LIBRARIES=$(brew --prefix openssl)/lib" >> $GITHUB_ENV

      - name: Setup MSYS2 (Windows)
        if: matrix.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-openssl
            mingw-w64-x86_64-libsodium
            mingw-w64-x86_64-argon2
            mingw-w64-x86_64-qt5-base
            mingw-w64-x86_64-qt5-tools
            cmake
            gcc
            mingw-w64-x86_64-ntldd
            git

      - name: Find Qt5 CMake directory
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          QT5_CONFIG=$(find /mingw64/ -name "Qt5Config.cmake" -o -name "qt5-config.cmake" | head -n 1)
          if [ -z "$QT5_CONFIG" ]; then
            echo "Qt5Config.cmake not found!"
            exit 1
          fi
          QT5_DIR=$(dirname ${QT5_CONFIG})
          echo "Qt5_DIR=${QT5_DIR}" >> $GITHUB_ENV
          echo "CMAKE_MODULE_PATH=${QT5_DIR}" >> $GITHUB_ENV

      - name: Build and set up dependencies (Windows)
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          echo "Setting up environment variables..."
          echo "OPENSSL_ROOT_DIR=/mingw64" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/mingw64/include" >> $GITHUB_ENV
          echo "OPENSSL_CRYPTO_LIBRARY=/mingw64/lib/libcrypto.a" >> $GITHUB_ENV
          echo "OPENSSL_SSL_LIBRARY=/mingw64/lib/libssl.a" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=/mingw64" >> $GITHUB_ENV
          echo "ARGON2_LIB_DIR=/mingw64/lib" >> $GITHUB_ENV
          echo "ARGON2_INCLUDE_DIR=/mingw64/include" >> $GITHUB_ENV
          echo "SODIUM_LIB_DIR=/mingw64/lib" >> $GITHUB_ENV
          echo "SODIUM_INCLUDE_DIR=/mingw64/include" >> $GITHUB_ENV
          echo "/mingw64/bin" >> $GITHUB_PATH

          echo "Verifying installations..."
          pacman -Q mingw-w64-x86_64-gcc mingw-w64-x86_64-cmake mingw-w64-x86_64-ninja mingw-w64-x86_64-openssl mingw-w64-x86_64-libsodium mingw-w64-x86_64-argon2 mingw-w64-x86_64-qt5-base mingw-w64-x86_64-qt5-tools

      - name: Debug environment variables
        run: |
          echo "ARGON2_LIB_DIR: ${{ env.ARGON2_LIB_DIR }}"
          echo "ARGON2_INCLUDE_DIR: ${{ env.ARGON2_INCLUDE_DIR }}"
          echo "SODIUM_LIB_DIR: ${{ env.SODIUM_LIB_DIR }}"
          echo "SODIUM_INCLUDE_DIR: ${{ env.SODIUM_INCLUDE_DIR }}"
          echo "OPENSSL_ROOT_DIR: ${{ env.OPENSSL_ROOT_DIR }}"
          echo "OPENSSL_INCLUDE_DIR: ${{ env.OPENSSL_INCLUDE_DIR }}"
          echo "OPENSSL_CRYPTO_LIBRARY: ${{ env.OPENSSL_CRYPTO_LIBRARY }}"
          echo "OPENSSL_SSL_LIBRARY: ${{ env.OPENSSL_SSL_LIBRARY }}"
          echo "CMAKE_PREFIX_PATH: ${{ env.CMAKE_PREFIX_PATH }}"
          echo "CMAKE_MODULE_PATH: ${{ env.CMAKE_MODULE_PATH }}"
          echo "Qt5_DIR: ${{ env.Qt5_DIR }}"
          echo "PATH: ${{ env.PATH }}"


      - name: Configure CMake for Windows
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          cmake -S . -B build -G "MinGW Makefiles" \
            -DOPENSSL_ROOT_DIR="${{ env.OPENSSL_ROOT_DIR }}" \
            -DOPENSSL_INCLUDE_DIR="${{ env.OPENSSL_INCLUDE_DIR }}" \
            -DOPENSSL_CRYPTO_LIBRARY="${{ env.OPENSSL_CRYPTO_LIBRARY }}" \
            -DOPENSSL_SSL_LIBRARY="${{ env.OPENSSL_SSL_LIBRARY }}" \
            -DCMAKE_PREFIX_PATH="${{ env.CMAKE_PREFIX_PATH }}" \
            -DCMAKE_MODULE_PATH="${{ env.CMAKE_MODULE_PATH }}" \
            -DQt5_DIR="${{ env.Qt5_DIR }}"

      - name: Configure CMake for macOS/Linux
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          cmake -S . -B build -G Ninja

      - name: Build for Windows
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: cmake --build build --config Release

      - name: Build for macOS/Linux
        if: matrix.os != 'windows-latest'
        shell: bash
        run: cmake --build build --config Release

      - name: Copy DLLs for Windows
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          echo "Creating necessary directories..."
          mkdir -p build/platforms || { echo "Failed to create build/platforms"; exit 1; }
          mkdir -p build/styles || { echo "Failed to create build/styles"; exit 1; }
      
          echo "Finding ntldd.exe..."
          NTLDD_PATH=$(find /mingw64/bin -name "ntldd.exe" | head -n 1)
          if [ -z "$NTLDD_PATH" ]; then
              echo "ntldd.exe not found!"
              exit 1
          fi
          echo "ntldd.exe found at $NTLDD_PATH"
      
          echo "Checking if build/OpenCryptUI.exe exists..."
          if [ ! -f "build/OpenCryptUI.exe" ]; then
              echo "build/OpenCryptUI.exe not found!"
              exit 1
          fi
      
          echo "Running ntldd and capturing DLLs..."
          DLL_PATHS=$(mktemp)
          "$NTLDD_PATH" -R build/OpenCryptUI.exe | while IFS= read -r line
          do
              if [[ "$line" =~ [A-Za-z]:\\[^[:space:]]+\.dll ]]; then
                  dll_path="${BASH_REMATCH[0]}"
                  echo "$dll_path" >> "$DLL_PATHS"
              fi
          done
      
          echo "Copying DLLs to build directory..."
          cat "$DLL_PATHS" | while IFS= read -r dll_path
          do
              if [[ "$dll_path" != *Windows* ]]; then
                  echo "Copying $dll_path to build directory"
                  cp "$dll_path" build/ || { echo "Failed to copy $dll_path"; exit 1; }
              else
                  echo "Skipping system DLL $dll_path"
              fi
          done
          rm "$DLL_PATHS"
      
          echo "Copying additional required DLLs..."
          cp /mingw64/bin/libglib-2.0-0.dll build/ || { echo "Failed to copy libglib-2.0-0.dll"; exit 1; }
          cp /mingw64/bin/libgraphite2.dll build/ || { echo "Failed to copy libgraphite2.dll"; exit 1; }
          cp /mingw64/bin/libintl-8.dll build/ || { echo "Failed to copy libintl-8.dll"; exit 1; }
      
          echo "Copying Qt plugins..."
          cp /mingw64/share/qt5/plugins/platforms/qwindows.dll build/platforms/ || { echo "Failed to copy qwindows.dll"; exit 1; }
          cp /mingw64/share/qt5/plugins/styles/qwindowsvistastyle.dll build/styles/ || { echo "Failed to copy qwindowsvistastyle.dll"; exit 1; }
      
          echo "All DLLs and plugins copied successfully."

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-build
          path: build/

      - name: Run tests (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install -y xvfb
          xvfb-run --auto-servernum --server-args="-screen 0 1024x768x24" cmake --build build --target all
          cd build
          xvfb-run --auto-servernum --server-args="-screen 0 1024x768x24" ctest --verbose

      # Add logging for debug on macOS
      - name: Debug build environment (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          echo "ARGON2_LIB_DIR: ${{ env.ARGON2_LIB_DIR }}"
          echo "ARGON2_INCLUDE_DIR: ${{ env.ARGON2_INCLUDE_DIR }}"
          echo "SODIUM_LIB_DIR: ${{ env.SODIUM_LIB_DIR }}"
          echo "SODIUM_INCLUDE_DIR: ${{ env.SODIUM_INCLUDE_DIR }}"
          echo "OPENSSL_ROOT_DIR: ${{ env.OPENSSL_ROOT_DIR }}"
          echo "OPENSSL_INCLUDE_DIR: ${{ env.OPENSSL_INCLUDE_DIR }}"
          echo "OPENSSL_CRYPTO_LIBRARY: ${{ env.OPENSSL_CRYPTO_LIBRARY }}"
          echo "OPENSSL_SSL_LIBRARY: ${{ env.OPENSSL_SSL_LIBRARY }}"
          echo "CMAKE_PREFIX_PATH: ${{ env.CMAKE_PREFIX_PATH }}"
          echo "Qt5_DIR: ${{ env.Qt5_DIR }}"
          echo "PATH: ${{ env.PATH }}"

      - name: Run tests (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          cmake --build build --target all
          cd build
          ctest --verbose

      - name: Run tests (Windows)
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          cmake --build build --target all
          cd build
          ctest --verbose

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}
          path: build/Testing/Temporary/LastTest.log

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Linux build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-latest-build
          path: build-linux/
          if-no-files-found: error

      - name: Download macOS build artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-latest-build
          path: build-macos/
          if-no-files-found: error

      - name: Download Windows build artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-latest-build
          path: build-windows/
          if-no-files-found: error

      - name: Create release directory
        run: mkdir -p release

      - name: Zip Linux build
        run: |
          cd build-linux
          zip -r ../release/opencryptui-linux-build.zip .

      - name: Zip macOS build
        run: |
          cd build-macos
          zip -r ../release/opencryptui-macos-build.zip .

      - name: Zip Windows build
        run: |
          cd build-windows
          zip -r ../release/opencryptui-windows-build.zip .

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/opencryptui-linux-build.zip
            release/opencryptui-macos-build.zip
            release/opencryptui-windows-build.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
