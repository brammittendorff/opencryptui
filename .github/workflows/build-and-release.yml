name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v1

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake git qt5-default qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools libssl-dev libsodium-dev libargon2-dev

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install qt openssl libsodium argon2

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
          choco install qt5
          choco install openssl
          choco install libsodium
          # Download and install Argon2
          Invoke-WebRequest -Uri "https://github.com/P-H-C/phc-winner-argon2/archive/refs/heads/master.zip" -OutFile "argon2.zip"
          Expand-Archive argon2.zip -DestinationPath argon2
          cd argon2/phc-winner-argon2-master
          mkdir build
          cd build
          cmake ..
          cmake --build . --config Release
          Copy-Item -Path "Release\argon2.exe" -Destination "C:\argon2"

      - name: Configure CMake
        run: cmake -S . -B build

      - name: Build
        run: cmake --build build --config Release

      - name: Archive build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-build
          path: build/

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download build artifacts (Linux)
        uses: actions/download-artifact@v2
        with:
          name: ubuntu-latest-build
          path: builds/linux/

      - name: Download build artifacts (macOS)
        uses: actions/download-artifact@v2
        with:
          name: macos-latest-build
          path: builds/macos/

      - name: Download build artifacts (Windows)
        uses: actions/download-artifact@v2
        with:
          name: windows-latest-build
          path: builds/windows/

      - name: Create release directory
        run: mkdir -p release

      - name: Copy build artifacts to release directory
        run: |
          cp -r builds/linux release/linux
          cp -r builds/macos release/macos
          cp -r builds/windows release/windows

      - name: Create zip of source code
        run: zip -r release/source.zip . -x .git\*

      - name: Upload release assets
        uses: actions/upload-artifact@v2
        with:
          name: release
          path: release/

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload release assets to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/
          asset_name: release.zip
          asset_content_type: application/zip
