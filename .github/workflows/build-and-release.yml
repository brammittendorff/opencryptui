name: Build and Release

on:
  push:
    branches:
      - '**'   # Runs the build for all branches when pushed
    tags:
      - 'v*'   # Triggers release when a tag is pushed
  pull_request:
    branches:
      - '**'   # Runs the build for all pull requests

permissions:
  contents: write
  packages: write
  deployments: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Setup minimal logging (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p ~/.config/QtProject
          echo -e "[Logging]\ndefault.debug=false\ndefault.warning=false" > ~/.config/QtProject/qtlogging.ini

      - name: Setup minimal logging (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          # Windows uses AppData/Roaming path for Qt settings
          mkdir -p "$APPDATA/QtProject"
          echo -e "[Logging]\r\ndefault.debug=false\r\ndefault.warning=false" > "$APPDATA/QtProject/qtlogging.ini"

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up CMake
        if: matrix.os != 'windows-latest'
        uses: jwlawson/actions-setup-cmake@v2

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build git qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools libssl-dev libsodium-dev libargon2-dev

      - name: Install Homebrew (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" || { echo "Homebrew installation failed"; exit 1; }

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install qt@5 openssl libsodium argon2 ninja
          brew link --force qt@5

      - name: Set environment variables for macOS
        if: matrix.os == 'macos-latest'
        run: |
          echo "ARGON2_LIB_DIR=$(brew --prefix argon2)/lib" >> $GITHUB_ENV
          echo "ARGON2_INCLUDE_DIR=$(brew --prefix argon2)/include" >> $GITHUB_ENV
          echo "SODIUM_LIB_DIR=$(brew --prefix libsodium)/lib" >> $GITHUB_ENV
          echo "SODIUM_INCLUDE_DIR=$(brew --prefix libsodium)/include" >> $GITHUB_ENV
          echo "Qt5_DIR=$(brew --prefix qt@5)/lib/cmake/Qt5" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$(brew --prefix qt@5)" >> $GITHUB_ENV
          echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl)" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$(brew --prefix openssl)/include" >> $GITHUB_ENV
          echo "OPENSSL_LIBRARIES=$(brew --prefix openssl)/lib" >> $GITHUB_ENV

      - name: Setup MSYS2 (Windows)
        if: matrix.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-openssl
            mingw-w64-x86_64-libsodium
            mingw-w64-x86_64-argon2
            mingw-w64-x86_64-qt5-base
            mingw-w64-x86_64-qt5-tools
            cmake
            gcc
            mingw-w64-x86_64-ntldd
            git

      - name: Find Qt5 CMake directory
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          QT5_CONFIG=$(find /mingw64/ -name "Qt5Config.cmake" -o -name "qt5-config.cmake" | head -n 1)
          if [ -z "$QT5_CONFIG" ]; then
            echo "Qt5Config.cmake not found!"
            exit 1
          fi
          QT5_DIR=$(dirname ${QT5_CONFIG})
          echo "Qt5_DIR=${QT5_DIR}" >> $GITHUB_ENV
          echo "CMAKE_MODULE_PATH=${QT5_DIR}" >> $GITHUB_ENV

      - name: Build and set up dependencies (Windows)
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          echo "Setting up environment variables..."
          echo "OPENSSL_ROOT_DIR=/mingw64" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/mingw64/include" >> $GITHUB_ENV
          echo "OPENSSL_CRYPTO_LIBRARY=/mingw64/lib/libcrypto.a" >> $GITHUB_ENV
          echo "OPENSSL_SSL_LIBRARY=/mingw64/lib/libssl.a" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=/mingw64" >> $GITHUB_ENV
          echo "ARGON2_LIB_DIR=/mingw64/lib" >> $GITHUB_ENV
          echo "ARGON2_INCLUDE_DIR=/mingw64/include" >> $GITHUB_ENV
          echo "SODIUM_LIB_DIR=/mingw64/lib" >> $GITHUB_ENV
          echo "SODIUM_INCLUDE_DIR=/mingw64/include" >> $GITHUB_ENV
          echo "/mingw64/bin" >> $GITHUB_PATH

          echo "Verifying installations..."
          pacman -Q mingw-w64-x86_64-gcc mingw-w64-x86_64-cmake mingw-w64-x86_64-ninja mingw-w64-x86_64-openssl mingw-w64-x86_64-libsodium mingw-w64-x86_64-argon2 mingw-w64-x86_64-qt5-base mingw-w64-x86_64-qt5-tools

      - name: Debug environment variables
        run: |
          echo "ARGON2_LIB_DIR: ${{ env.ARGON2_LIB_DIR }}"
          echo "ARGON2_INCLUDE_DIR: ${{ env.ARGON2_INCLUDE_DIR }}"
          echo "SODIUM_LIB_DIR: ${{ env.SODIUM_LIB_DIR }}"
          echo "SODIUM_INCLUDE_DIR: ${{ env.SODIUM_INCLUDE_DIR }}"
          echo "OPENSSL_ROOT_DIR: ${{ env.OPENSSL_ROOT_DIR }}"
          echo "OPENSSL_INCLUDE_DIR: ${{ env.OPENSSL_INCLUDE_DIR }}"
          echo "OPENSSL_CRYPTO_LIBRARY: ${{ env.OPENSSL_CRYPTO_LIBRARY }}"
          echo "OPENSSL_SSL_LIBRARY: ${{ env.OPENSSL_SSL_LIBRARY }}"
          echo "CMAKE_PREFIX_PATH: ${{ env.CMAKE_PREFIX_PATH }}"
          echo "CMAKE_MODULE_PATH: ${{ env.CMAKE_MODULE_PATH }}"
          echo "Qt5_DIR: ${{ env.Qt5_DIR }}"
          echo "PATH: ${{ env.PATH }}"

      - name: Configure CMake for Windows
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          cmake -S . -B build -G "MinGW Makefiles" \
            -DOPENSSL_ROOT_DIR="${{ env.OPENSSL_ROOT_DIR }}" \
            -DOPENSSL_INCLUDE_DIR="${{ env.OPENSSL_INCLUDE_DIR }}" \
            -DOPENSSL_CRYPTO_LIBRARY="${{ env.OPENSSL_CRYPTO_LIBRARY }}" \
            -DOPENSSL_SSL_LIBRARY="${{ env.OPENSSL_SSL_LIBRARY }}" \
            -DCMAKE_PREFIX_PATH="${{ env.CMAKE_PREFIX_PATH }}" \
            -DCMAKE_MODULE_PATH="${{ env.CMAKE_MODULE_PATH }}" \
            -DQt5_DIR="${{ env.Qt5_DIR }}" \
            -DCMAKE_CXX_FLAGS="-DQT_CI_BUILD -DQT_NO_DEBUG_OUTPUT -DQT_NO_WARNING_OUTPUT"

      - name: Configure CMake for macOS/Linux
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_CXX_FLAGS="-DQT_CI_BUILD -DQT_NO_DEBUG_OUTPUT -DQT_NO_WARNING_OUTPUT"

      - name: Build for Windows
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: cmake --build build --config Release

      - name: Build for macOS/Linux
        if: matrix.os != 'windows-latest'
        shell: bash
        run: cmake --build build --config Release

      - name: Create CI Test Script (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          cat << 'EOFSCRIPT' > build/ci_test.sh
          #!/bin/bash
          # CI Test Runner - Runs tests with minimal log output
          export CI=true
          export QT_LOGGING_RULES="*.debug=false;*.info=false;*.warning=false"
          export QT_MESSAGE_PATTERN=""
          ./OpenCryptUITest -silent -v1
          exit $?
          EOFSCRIPT
          chmod +x build/ci_test.sh

      - name: Create CI Test Script (Windows) 
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          cat << 'EOFSCRIPT' > build/ci_test.sh
          #!/bin/bash
          # CI Test Runner - Runs tests with minimal log output
          export CI=true
          export QT_LOGGING_RULES="*.debug=false;*.info=false;*.warning=false"
          export QT_MESSAGE_PATTERN=""
          ./OpenCryptUITest.exe -silent -v1
          exit $?
          EOFSCRIPT
          chmod +x build/ci_test.sh

      - name: Copy DLLs for Windows
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          echo "Creating necessary directories for Qt plugins..."
          mkdir -p build/platforms || { echo "Failed to create build/platforms"; exit 1; }
          mkdir -p build/styles || { echo "Failed to create build/styles"; exit 1; }
          mkdir -p build/imageformats || { echo "Failed to create build/imageformats"; exit 1; }
          mkdir -p build/iconengines || { echo "Failed to create build/iconengines"; exit 1; }
      
          echo "Finding ntldd.exe..."
          NTLDD_PATH=$(find /mingw64/bin -name "ntldd.exe" | head -n 1)
          if [ -z "$NTLDD_PATH" ]; then
              echo "ntldd.exe not found!"
              exit 1
          fi
          echo "ntldd.exe found at $NTLDD_PATH"
      
          echo "Checking if build/OpenCryptUI.exe exists..."
          if [ ! -f "build/OpenCryptUI.exe" ]; then
              echo "build/OpenCryptUI.exe not found!"
              exit 1
          fi
      
          echo "Running ntldd and capturing DLLs..."
          # Run a recursive dependency check to catch all required DLLs
          DLL_PATHS=$(mktemp)
          "$NTLDD_PATH" -R build/OpenCryptUI.exe | grep -i "mingw" | grep -v "not found" | awk '{print $3}' | sort -u > "$DLL_PATHS"
      
          echo "Copying DLLs to build directory..."
          while IFS= read -r dll_path; do
            if [[ -f "$dll_path" ]]; then
              echo "Copying $dll_path to build directory"
              cp "$dll_path" build/ || { echo "Failed to copy $dll_path"; }
            fi
          done < "$DLL_PATHS"
          rm "$DLL_PATHS"
      
          echo "Copying additional required DLLs..."
          # Essential system libraries
          cp -f /mingw64/bin/libstdc++-6.dll build/ || echo "Warning: libstdc++-6.dll not found"
          cp -f /mingw64/bin/libgcc_s_seh-1.dll build/ || echo "Warning: libgcc_s_seh-1.dll not found"
          cp -f /mingw64/bin/libwinpthread-1.dll build/ || echo "Warning: libwinpthread-1.dll not found"
          
          # Qt dependencies
          cp -f /mingw64/bin/libglib-2.0-0.dll build/ || echo "Warning: libglib-2.0-0.dll not found"
          cp -f /mingw64/bin/libgraphite2.dll build/ || echo "Warning: libgraphite2.dll not found"
          cp -f /mingw64/bin/libintl-8.dll build/ || echo "Warning: libintl-8.dll not found"
          cp -f /mingw64/bin/libbz2-1.dll build/ || echo "Warning: libbz2-1.dll not found"
          cp -f /mingw64/bin/libpcre-1.dll build/ || echo "Warning: libpcre-1.dll not found"
          cp -f /mingw64/bin/libpcre2-16-0.dll build/ || echo "Warning: libpcre2-16-0.dll not found"
          cp -f /mingw64/bin/libharfbuzz-0.dll build/ || echo "Warning: libharfbuzz-0.dll not found"
          cp -f /mingw64/bin/libpng16-16.dll build/ || echo "Warning: libpng16-16.dll not found"
          cp -f /mingw64/bin/zlib1.dll build/ || echo "Warning: zlib1.dll not found"
          cp -f /mingw64/bin/libiconv-2.dll build/ || echo "Warning: libiconv-2.dll not found"
          cp -f /mingw64/bin/libfreetype-6.dll build/ || echo "Warning: libfreetype-6.dll not found"
          
          # Crypto dependencies
          cp -f /mingw64/bin/libsodium-23.dll build/ || echo "Warning: libsodium-23.dll not found"
          cp -f /mingw64/bin/libargon2.dll build/ || echo "Warning: libargon2.dll not found"
          cp -f /mingw64/bin/libssl-1_1-x64.dll build/ || echo "Warning: libssl-1_1-x64.dll not found"
          cp -f /mingw64/bin/libcrypto-1_1-x64.dll build/ || echo "Warning: libcrypto-1_1-x64.dll not found"
      
          echo "Copying Qt core DLLs..."
          cp -f /mingw64/bin/Qt5Core.dll build/ || echo "Warning: Qt5Core.dll not found"
          cp -f /mingw64/bin/Qt5Gui.dll build/ || echo "Warning: Qt5Gui.dll not found"
          cp -f /mingw64/bin/Qt5Widgets.dll build/ || echo "Warning: Qt5Widgets.dll not found"
          cp -f /mingw64/bin/Qt5Network.dll build/ || echo "Warning: Qt5Network.dll not found"
          cp -f /mingw64/bin/Qt5Svg.dll build/ || echo "Warning: Qt5Svg.dll not found"
          cp -f /mingw64/bin/Qt5DBus.dll build/ || echo "Warning: Qt5DBus.dll not found"
          cp -f /mingw64/bin/Qt5XmlPatterns.dll build/ || echo "Warning: Qt5XmlPatterns.dll not found"
          cp -f /mingw64/bin/Qt5Xml.dll build/ || echo "Warning: Qt5Xml.dll not found"
          cp -f /mingw64/bin/Qt5PrintSupport.dll build/ || echo "Warning: Qt5PrintSupport.dll not found"
      
          echo "Copying Qt plugins..."
          # Platform plugins
          cp -f /mingw64/share/qt5/plugins/platforms/qwindows.dll build/platforms/ || echo "Warning: qwindows.dll not found"
          cp -f /mingw64/share/qt5/plugins/platforms/qminimal.dll build/platforms/ || echo "Warning: qminimal.dll not found"
          
          # Style plugins
          cp -f /mingw64/share/qt5/plugins/styles/qwindowsvistastyle.dll build/styles/ || echo "Warning: qwindowsvistastyle.dll not found"
          
          # Image format plugins
          cp -f /mingw64/share/qt5/plugins/imageformats/qjpeg.dll build/imageformats/ || echo "Warning: qjpeg.dll not found"
          cp -f /mingw64/share/qt5/plugins/imageformats/qgif.dll build/imageformats/ || echo "Warning: qgif.dll not found"
          cp -f /mingw64/share/qt5/plugins/imageformats/qico.dll build/imageformats/ || echo "Warning: qico.dll not found"
          cp -f /mingw64/share/qt5/plugins/imageformats/qsvg.dll build/imageformats/ || echo "Warning: qsvg.dll not found"
          cp -f /mingw64/share/qt5/plugins/imageformats/qpng.dll build/imageformats/ || echo "Warning: qpng.dll not found"
          cp -f /mingw64/share/qt5/plugins/imageformats/qicns.dll build/imageformats/ || echo "Warning: qicns.dll not found"
          cp -f /mingw64/share/qt5/plugins/imageformats/qtga.dll build/imageformats/ || echo "Warning: qtga.dll not found"
          cp -f /mingw64/share/qt5/plugins/imageformats/qtiff.dll build/imageformats/ || echo "Warning: qtiff.dll not found"
          cp -f /mingw64/share/qt5/plugins/imageformats/qwbmp.dll build/imageformats/ || echo "Warning: qwbmp.dll not found"
          cp -f /mingw64/share/qt5/plugins/imageformats/qwebp.dll build/imageformats/ || echo "Warning: qwebp.dll not found"
          
          # Icon engines
          cp -f /mingw64/share/qt5/plugins/iconengines/qsvgicon.dll build/iconengines/ || echo "Warning: qsvgicon.dll not found"
          
          # Additional required plugins directories
          mkdir -p build/printsupport || { echo "Failed to create build/printsupport"; }
          cp -f /mingw64/share/qt5/plugins/printsupport/windowsprintersupport.dll build/printsupport/ || echo "Warning: windowsprintersupport.dll not found"
          
          # Copy resource files
          echo "Copying resources..."
          cp -rf resources build/ || echo "Warning: Failed to copy resources directory"
          
          echo "Creating Qt configuration file..."
          cat > build/qt.conf << EOF
          [Paths]
          Prefix = .
          Plugins = .
          Imports = ./imports
          Qml2Imports = ./qml
          EOF
          
          echo "All DLLs and plugins copied successfully."

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-build
          path: build/

      - name: Run tests and generate screenshot (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install -y xvfb scrot imagemagick
          xvfb-run --auto-servernum --server-args="-screen 0 1024x768x24" cmake --build build --target all
          cd build
          echo "Running tests with minimal output..."
          xvfb-run --auto-servernum --server-args="-screen 0 1024x768x24" ./ci_test.sh
          
          # Create screenshot capture script
          cat > capture_screenshot.sh << 'EOF'
          #!/bin/bash
          # Start the application in the background
          echo "Starting application..."
          export DISPLAY=:99
          ./OpenCryptUI &
          APP_PID=$!
          
          # Wait for the window to appear and become stable
          echo "Waiting for window to stabilize..."
          sleep 3
          
          # Take the screenshot
          echo "Taking screenshot..."
          scrot -u "opencryptui_screenshot.png"
          
          # Terminate the application
          kill $APP_PID
          
          # Optimize the image
          convert opencryptui_screenshot.png -quality 90 opencryptui_screenshot.png
          
          echo "Screenshot captured successfully!"
          EOF
          
          chmod +x capture_screenshot.sh
          
          # Run the screenshot capture script
          echo "Capturing application screenshot..."
          xvfb-run --auto-servernum --server-args="-screen 0 1024x768x24" ./capture_screenshot.sh
          
          # Check if screenshot was created successfully
          if [ -f "opencryptui_screenshot.png" ]; then
            echo "Screenshot created successfully"
            # Copy the screenshot to the repository root
            cp opencryptui_screenshot.png ../opencryptui.png
          else
            echo "Failed to create screenshot"
          fi

      - name: Run tests (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          cmake --build build --target all
          cd build
          echo "Running tests with minimal output..."
          ./ci_test.sh

      - name: Run tests (Windows)
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          cmake --build build --target all
          cd build
          echo "Running tests with minimal output..."
          ./ci_test.sh

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}
          path: build/Testing/Temporary/LastTest.log
      
      - name: Upload screenshot
        if: matrix.os == 'ubuntu-latest' && success()
        uses: actions/upload-artifact@v4
        with:
          name: opencryptui-screenshot
          path: opencryptui.png

  update-screenshot:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Download screenshot
        uses: actions/download-artifact@v4
        with:
          name: opencryptui-screenshot
          
      - name: Commit updated screenshot
        run: |
          if [ -f "opencryptui.png" ]; then
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            
            # Check if the screenshot has actually changed
            git diff --quiet opencryptui.png || {
              echo "Screenshot has changed, committing..."
              git add opencryptui.png
              git commit -m "Update application screenshot [skip ci]"
              
              # Push the changes
              git push https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:main
            }
          else
            echo "Screenshot file not found, skipping commit"
          fi
          
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Linux build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-latest-build
          path: build-linux/
          if-no-files-found: error

      - name: Download macOS build artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-latest-build
          path: build-macos/
          if-no-files-found: error

      - name: Download Windows build artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-latest-build
          path: build-windows/
          if-no-files-found: error
          
      - name: Create resources directory for builds if needed
        run: |
          mkdir -p build-linux/resources 2>/dev/null || true
          mkdir -p build-macos/resources 2>/dev/null || true
          mkdir -p build-windows/resources 2>/dev/null || true

      - name: Create release directory
        run: mkdir -p release

      - name: Zip Linux build
        run: |
          cd build-linux
          zip -r ../release/opencryptui-linux-build.zip .

      - name: Zip macOS build
        run: |
          cd build-macos
          zip -r ../release/opencryptui-macos-build.zip .

      - name: Zip Windows build
        run: |
          cd build-windows
          zip -r ../release/opencryptui-windows-build.zip .

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/opencryptui-linux-build.zip
            release/opencryptui-macos-build.zip
            release/opencryptui-windows-build.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
