name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v2

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build git qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools libssl-dev libsodium-dev libargon2-dev

      - name: Install Homebrew (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" || { echo "Homebrew installation failed"; exit 1; }

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install qt@5 openssl libsodium argon2 ninja
          brew link --force qt@5

      - name: Set environment variables for macOS
        if: matrix.os == 'macos-latest'
        run: |
          echo "ARGON2_LIB_DIR=$(brew --prefix argon2)/lib" >> $GITHUB_ENV
          echo "ARGON2_INCLUDE_DIR=$(brew --prefix argon2)/include" >> $GITHUB_ENV
          echo "SODIUM_LIB_DIR=$(brew --prefix libsodium)/lib" >> $GITHUB_ENV
          echo "SODIUM_INCLUDE_DIR=$(brew --prefix libsodium)/include" >> $GITHUB_ENV

      - name: Configure CMake (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          QT_DIR=$(brew --prefix qt@5)
          cmake -S . -B build -G Ninja -DCMAKE_PREFIX_PATH=$QT_DIR -DQt5_DIR=$QT_DIR/lib/cmake/Qt5 -DQt5Core_DIR=$QT_DIR/lib/cmake/Qt5Core -DQt5Gui_DIR=$QT_DIR/lib/cmake/Qt5Gui -DQt5Widgets_DIR=$QT_DIR/lib/cmake/Qt5Widgets

      - name: Build (macOS)
        if: matrix.os == 'macos-latest'
        run: cmake --build build --config Release

      - name: Install Chocolatey and dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex "& { $(irm https://chocolatey.org/install.ps1) }"
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
          choco install git -y
          choco install qt5-sdk -y
          choco install openssl -y
          choco install libsodium -y
          choco install mingw --version 8.1.0 -y

      - name: Check MinGW Installation (Windows)
        if: matrix.os == 'windows-latest'
        run: g++ --version

      - name: Build Argon2 from source (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          git clone https://github.com/P-H-C/phc-winner-argon2.git
          cd phc-winner-argon2
          mkdir build
          cd build
          cmake -G "MinGW Makefiles" ..
          cmake --build . --config Release
          Copy-Item -Path "libargon2.a" -Destination "C:\argon2\lib" -Force
          Copy-Item -Path "..\include" -Destination "C:\argon2" -Recurse -Force

      - name: Set environment variables for Windows
        if: matrix.os == 'windows-latest'
        run: |
          echo "ARGON2_LIB_DIR=C:\argon2\lib" >> $env:GITHUB_ENV
          echo "ARGON2_INCLUDE_DIR=C:\argon2\include" >> $env:GITHUB_ENV
          echo "SODIUM_LIB_DIR=C:\Program Files\libsodium" >> $env:GITHUB_ENV
          echo "SODIUM_INCLUDE_DIR=C:\Program Files\libsodium\include" >> $env:GITHUB_ENV

      - name: Configure CMake
        run: cmake -S . -B build -G "${{ matrix.os == 'windows-latest' && 'MinGW Makefiles' || 'Ninja' }}"

      - name: Build
        run: cmake --build build --config Release

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-build
          path: build/

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts (Linux)
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-latest-build
          path: builds/linux/

      - name: Download build artifacts (macOS)
        uses: actions/download-artifact@v4
        with:
          name: macos-latest-build
          path: builds/macos/

      - name: Download build artifacts (Windows)
        uses: actions/download-artifact@v4
        with:
          name: windows-latest-build
          path: builds/windows/

      - name: Create release directory
        run: mkdir -p release

      - name: Copy build artifacts to release directory
        run: |
          cp -r builds/linux release/linux
          cp -r builds/macos release/macos
          cp -r builds/windows release/windows

      - name: Create zip of source code
        run: zip -r release/source.zip . -x .git\*

      - name: Upload release assets
        uses: actions/upload-artifact@v4
        with:
          name: release
          path: release/

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload release assets to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/
          asset_name: release.zip
          asset_content_type: application/zip
